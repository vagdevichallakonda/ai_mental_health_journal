{"ast":null,"code":"// frontend/src/services/api.js\nconst API_BASE = process.env.REACT_APP_API_BASE || \"http://localhost:5000\";\nexport async function predictMood(text) {\n  const res = await fetch(`${API_BASE}/predict_mood`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      text\n    })\n  });\n  if (!res.ok) {\n    const err = await res.json().catch(() => ({}));\n    throw new Error(err.error || `HTTP ${res.status}`);\n  }\n  return res.json();\n}\nexport async function predictVoiceEmotion(file) {\n  const formData = new FormData();\n  formData.append(\"file\", file);\n  const res = await fetch(`${API_BASE}/predict_voice_emotion`, {\n    method: \"POST\",\n    body: formData\n  });\n  if (!res.ok) {\n    const err = await res.json().catch(() => ({}));\n    throw new Error(err.error || `HTTP ${res.status}`);\n  }\n  return res.json();\n}","map":{"version":3,"names":["API_BASE","process","env","REACT_APP_API_BASE","predictMood","text","res","fetch","method","headers","body","JSON","stringify","ok","err","json","catch","Error","error","status","predictVoiceEmotion","file","formData","FormData","append"],"sources":["C:/Users/vagde/Downloads/ai_mental_health_journal_pro/ai-mental-health-journal/frontend/src/services/api.js"],"sourcesContent":["// frontend/src/services/api.js\r\nconst API_BASE =\r\n  process.env.REACT_APP_API_BASE || \"http://localhost:5000\";\r\n\r\nexport async function predictMood(text) {\r\n  const res = await fetch(`${API_BASE}/predict_mood`, {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ text }),\r\n  });\r\n  if (!res.ok) {\r\n    const err = await res.json().catch(() => ({}));\r\n    throw new Error(err.error || `HTTP ${res.status}`);\r\n  }\r\n  return res.json();\r\n}\r\n\r\nexport async function predictVoiceEmotion(file) {\r\n  const formData = new FormData();\r\n  formData.append(\"file\", file);\r\n  const res = await fetch(`${API_BASE}/predict_voice_emotion`, {\r\n    method: \"POST\",\r\n    body: formData,\r\n  });\r\n  if (!res.ok) {\r\n    const err = await res.json().catch(() => ({}));\r\n    throw new Error(err.error || `HTTP ${res.status}`);\r\n  }\r\n  return res.json();\r\n}\r\n"],"mappings":"AAAA;AACA,MAAMA,QAAQ,GACZC,OAAO,CAACC,GAAG,CAACC,kBAAkB,IAAI,uBAAuB;AAE3D,OAAO,eAAeC,WAAWA,CAACC,IAAI,EAAE;EACtC,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGP,QAAQ,eAAe,EAAE;IAClDQ,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP;IAAK,CAAC;EAC/B,CAAC,CAAC;EACF,IAAI,CAACC,GAAG,CAACO,EAAE,EAAE;IACX,MAAMC,GAAG,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC9C,MAAM,IAAIC,KAAK,CAACH,GAAG,CAACI,KAAK,IAAI,QAAQZ,GAAG,CAACa,MAAM,EAAE,CAAC;EACpD;EACA,OAAOb,GAAG,CAACS,IAAI,CAAC,CAAC;AACnB;AAEA,OAAO,eAAeK,mBAAmBA,CAACC,IAAI,EAAE;EAC9C,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;EAC7B,MAAMf,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGP,QAAQ,wBAAwB,EAAE;IAC3DQ,MAAM,EAAE,MAAM;IACdE,IAAI,EAAEY;EACR,CAAC,CAAC;EACF,IAAI,CAAChB,GAAG,CAACO,EAAE,EAAE;IACX,MAAMC,GAAG,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC9C,MAAM,IAAIC,KAAK,CAACH,GAAG,CAACI,KAAK,IAAI,QAAQZ,GAAG,CAACa,MAAM,EAAE,CAAC;EACpD;EACA,OAAOb,GAAG,CAACS,IAAI,CAAC,CAAC;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}